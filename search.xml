<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API 2]]></title>
    <url>%2F2019%2F04%2F12%2F%5BNotes%5D%20TicketMaster%20API%202%2F</url>
    <content type="text"><![CDATA[TicketMaster API 2Benifits of builder class Easier to use because you don’t need to call a constructor with long parameter list Easier to implement because you don’t need to provide constructors with different combinations of private fields. TicketMasterAPI.java Add getAddress 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/*** get the Address from the JSONObject* @param event* @return A String of address* @throws JSONException*/private String getAddress(JSONObject event) throws JSONException &#123; if (!event.isNull("_embedded")) &#123; JSONObject embedded = event.getJSONObject("_embedded"); if (!embedded.isNull("venues")) &#123; JSONArray venues = embedded.getJSONArray("venues"); for (int i = 0; i &lt; venues.length(); ++i) &#123; JSONObject venue = venues.getJSONObject(i); StringBuilder sb = new StringBuilder(); if (!venue.isNull("address")) &#123; JSONObject address = venue.getJSONObject("address"); if (!address.isNull("line1")) &#123; sb.append(address.getString("line1")); &#125; if (!address.isNull("line2")) &#123; sb.append(" "); sb.append(address.getString("line2")); &#125; if (!address.isNull("line3")) &#123; sb.append(" "); sb.append(address.getString("line3")); &#125; &#125; if (!venue.isNull("city")) &#123; JSONObject city = venue.getJSONObject("city"); if (!city.isNull("name")) &#123; sb.append(" "); sb.append(city.getString("name")); &#125; &#125; if (!sb.toString().equals("")) &#123; return sb.toString(); &#125; &#125; &#125; &#125; return "";&#125; Add getImageURL 12345678910111213141516171819202122// &#123;"images": [&#123;"url": "www.example.com/my_image.jpg"&#125;, ...]&#125;/*** Get the image URL from a JSONOBject* @param event* @return A String of image URL* @throws JSONException*/private String getImageUrl(JSONObject event) throws JSONException &#123; if (!event.isNull("images")) &#123; JSONArray images = event.getJSONArray("images"); for (int i = 0; i &lt; images.length(); ++i) &#123; JSONObject image = images.getJSONObject(i); if (!image.isNull("url")) &#123; return image.getString("url"); &#125; &#125; &#125; return "";&#125; Add getCategories 12345678910111213141516171819202122232425// &#123;"classifications" : [&#123;"segment": &#123;"name": "music"&#125;&#125;, ...]&#125;/** * Get a set of categories from a JSONObject * @param event * @return A set of string * @throws JSONException */private Set&lt;String&gt; getCategories(JSONObject event) throws JSONException &#123; Set&lt;String&gt; categories = new HashSet&lt;&gt;(); if (!event.isNull("classifications")) &#123; JSONArray classifications = event.getJSONArray("classifications"); for (int i = 0; i &lt; classifications.length(); i++) &#123; JSONObject classification = classifications.getJSONObject(i); if (!classification.isNull("segment")) &#123; JSONObject segment = classification.getJSONObject("segment"); if (!segment.isNull("name")) &#123; String name = segment.getString("name"); categories.add(name); &#125; &#125; &#125; &#125; return categories;&#125; Add getItemList 1234567891011121314151617181920212223242526272829303132333435363738394041424344// Convert JSONArray to a list of item objects./** * Convert JSONArray to a list of item objects * @param events * @return A list of Item objects * @throws JSONException */private List&lt;Item&gt; getItemList(JSONArray events) throws JSONException &#123; List&lt;Item&gt; itemList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; events.length(); ++i) &#123; JSONObject event = events.getJSONObject(i); ItemBuilder builder = new ItemBuilder(); if (!event.isNull("name")) &#123; builder.setName(event.getString("name")); &#125; if (!event.isNull("id")) &#123; builder.setItemId(event.getString("id")); &#125; if (!event.isNull("url")) &#123; builder.setUrl(event.getString("url")); &#125; if (!event.isNull("rating")) &#123; builder.setRating(event.getDouble("rating")); &#125; if (!event.isNull("distance")) &#123; builder.setDistance(event.getDouble("distance")); &#125; builder.setCategories(getCategories(event)); builder.setAddress(getAddress(event)); builder.setImageUrl(getImageUrl(event)); itemList.add(builder.build()); &#125; return itemList;&#125; Modify Search() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * Search the JSONArray results through TM API * @param lat latitude * @param lon longitude * @param keyword keyword is optional * @return JSONArray */public List&lt;Item&gt; search(double lat, double lon, String keyword) &#123; List&lt;Item&gt; ret = new ArrayList&lt;Item&gt;(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = getItemList(events); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Modify doGet() in searchItem Servlet /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); TicketMasterAPI tmAPI = new TicketMasterAPI(); List&lt;Item&gt; items = tmAPI.search(lat, lon, keyword); JSONArray array = new JSONArray(); try { for (Item item : items) { JSONObject obj = item.toJSONObject(); array.put(obj); } } catch (Exception e) { e.printStackTrace(); } RpcHelper.writeJSONArray(response, array); } Test result test on http://localhost:8080/Jupiter/search?lat=37.38&amp;lon=-122.08]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] CSS Basic]]></title>
    <url>%2F2019%2F04%2F11%2F%5BNotes%5D%20CSS%20Basic%2F</url>
    <content type="text"><![CDATA[CSS BasicCSS introduction CSS stands for Cascading Style Sheets describes how HTML elements (titles, images, paragraph…) are to be displayed on screen, paper, or in other media CSS version 2.1/3.0 IE9 and above browsers support CSS 3.0 CSS in HTML Usage of CSS in HTMl Inline Style 内联样式 (highest priority) &lt;h1 style=&quot;color:blue;&quot;&gt;This is a heading&lt;/h1&gt; (Not recommended) Internal Style 嵌入样式 (second priority) 1234567&lt;head&gt;&lt;style&gt;h1 &#123; color: maroon; &#125; &lt;/style&gt;&lt;/head&gt; External Style 外部样式 (lowest priority) Each page must include a reference to the external style sheet file inside the &lt;link&gt; element. The &lt;link&gt; element goes inside the &lt;head&gt; section: 123&lt;head&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;&lt;/head&gt; type attribute: specifies the media type of the linked document rel：specifies the relationship between the current document and the linked document href：specifies the location of the linked document Default Style 缺省样式 example 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;!-- external style --&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt; &lt;/head&gt; &lt;!-- internal style --&gt; &lt;style&gt; h1 &#123; color: blue; &#125; &lt;/style&gt; &lt;body&gt; &lt;!-- default style --&gt; &lt;h2&gt;test0&lt;/h2&gt; &lt;h1&gt;test1&lt;/h1&gt; &lt;!-- Inline style --&gt; &lt;p style="color:brown"&gt;test2&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Syntax Selector {Property: value; Property: value;} example h1 {color:blue;font-size:12px;} The selector points to the HTML element you want to style. The declaration block contains one or more declarations separated by semicolons. each declaration includes a CSS property name and a value, separated by a colon. always ends with a semicolon declaration blocks are surrounded by curly braces. Comment /* */ Basic properties width - 宽度， 单位px（像素） height - 高度 color - 前景色， 也就是文字的颜色 background-color - 背景色 font-size - 字体的大小 CSS Selectors * All Elements * {color:blue} /*all items set to blue*/ Element name. p {color:blue} /* all p tag turn to blue */ #id The id selector uses the id attribute of an HTML element to select a specific element. The id of an element should be unique within a page, so the id selector is used to select one unique element! To select an element with a specific id, write a hash (#) character, followed by the id of the element.12345&lt;li id=”li-ca”&gt;CA&lt;/li&gt; #li-ca &#123; color: blue;&#125; class The class selector selects elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the name of the class.12345.nice &#123; color: purple;&#125; &lt;p class="nice"&gt;lalala&lt;/p&gt;&lt;p class="nice"&gt;hohoho&lt;/p&gt; Combinator Combinator is a selector combined by multiple selectors. 后代选择器 div p : selects all &lt;p&gt; elements inside &lt;div&gt; elements` 1.class h3 &#123;color:red; font-size:25px;&#125; 并集选择器 div, p : selects all &lt;div&gt; elements and all &lt;p&gt; elements 1.class, h3 &#123;color:red; font-size:25px;&#125; 子元素选择器 div &gt; p : selects all &lt;p&gt; elements where the parent is a &lt;div&gt; element 1.class, h3 &#123;color:red; font-size:25px;&#125; Difference of div p and div &gt; p: div p includes all sons and grandsons, while div &gt; p has only direct sons. 12345678910111213141516171819&lt;style&gt; &lt;!-- All strong whose parent is p --&gt; p &gt; strong &#123; color: red; &#125; p &gt; span &gt; strong &#123; color: green; &#125; &lt;!-- All strong below div --&gt; div strong &#123; font-size: 50px; &#125; &lt;/style&gt; &lt;!-- ... --&gt;&lt;div&gt; &lt;p id="aa"&gt;this is &lt;span&gt;&lt;strong&gt;strong under span&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;this is paragraph 3&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I am strong under p&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt; Attribute selector: Use a [] to select attributes 1234567891011121314151617181920&lt;style&gt; &lt;!-- all p with class attribute --&gt; p[class] &#123; color:red; &#125; &lt;!-- the class of p is "right --&gt; p[class="right"] &#123; color:blue; &#125; &lt;!-- class~="demo means class contains "demo"--&gt; p[class~="demo"] &#123; font-size: 60px; &#125; &lt;/style&gt; &lt;body&gt; &lt;p class="right"&gt; i am div1&lt;/p&gt; &lt;p&gt; i am div2&lt;/p&gt; &lt;p class="left demo"&gt; i am div3&lt;/p&gt; &lt;p id="side"&gt; i am div4&lt;/p&gt; &lt;/body&gt; Pseudo Classes 伪类 :link - (a:link) selects all unvisited links :hover - (a:hover) selects links on mouse over :active - (a:active) selects the active link :visited - (a:visited) selects all visited links\ :first-child - (p:first-child) selects every &lt;p&gt; element that is the first child of its parent 123456789101112131415161718&lt;style&gt; a:link &#123; color: red; &#125; a:visited &#123; color: yellow; &#125; a:hover &#123; font-size: 50px; color: blue; &#125; a:active &#123; color: green; &#125; p:first-child &#123; background-color: brown; &#125; &lt;/style&gt; Pesudo Elements ::first-element (does not work on inline elements, such as span)123456&lt;style&gt; p::first-letter &#123; font-size: 100px; color: pink; &#125; &lt;/style&gt; CSS Cascade and Inheritance CSS Cascade the cascade is a set of rules for determining which style properties get applied to an element. It specifies how a web browser should handle multiple styles that apply to the same tag and what to do when CSS properties conflict. bottom &gt; top Inheritance some property values applied to an element will be inherited by that element’s children, and some won’t. font-family and color to be inherited, as that makes it easy for you to set a site-wide base font by applying a font-family to the &lt;html&gt; element; margin, padding, border, and background-image to NOT be inherited &lt;a&gt; does not support any kind of inheritance unless: a {color: inherit;} eg. &lt;span&gt; inside a &lt;p&gt; will be overrided. Specificity First Principle Inline style &gt; Internal &gt; external &gt; inheritance &gt; default Second Principle id &gt; class/pseudo class &gt; tag &gt; inheritance &gt; default Specificity Collision CSS provides a formula for determining a style’s specificity that’s based on a value assigned to the style’s selector - a tag selector, class selector, ID selector, and so on. Here’s how the system works: A tag selector is worth 1 point. A class selector is worth 10 points. An ID selector is worth 100 points. An inline style is worth 1,000 points. The bigger the number, the greater the specificity. Example A tag style for the tag (specificity = 1) A class style named .highlight (specificity = 10) An ID style named #logo (specificity = 100) Then say your web page has this HTML: &lt;img id=”logo” class=”highlight” src=”logo.gif”/&gt;. If you define the same property - such as the border property - in all three styles, then the value from the ID style (#logo) always wins out. A pseudo-element (like ::before) is treated like a tag selector and is worth 1 point. A pseudo-class (:link) is treated like a class and is worth 10 points. Since descendant selectors are composed of several selectors - #content p, or h2 strong, for example, the math gets a bit more complicated. The specificity of a descendant selector is the total value of all of the selectors listed. A descendant selector = 1 tag + 1 tag/class If there’s still collision, last style wins !important; This is an overruling specificity, it means ‘this is important, ignore subsequent rules, and any usual specificity issues, apply this rule!’ For example:1234&lt;style&gt;.nav a &#123; color: red; &#125;a &#123; color: blue !important; &#125;&lt;/style&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>HTML</tag>
        <tag>Java</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20TicketMaster%20API%2F</url>
    <content type="text"><![CDATA[TicketMaster APIHTML request message Request structure GET /doc/test.html HTTP 1.1First part indicates the type of the request, second part indicates the resource it asks for, third part is the version of protocal Request Header Request Body bookId=12345&amp;author=Tan+Ah+Teck Some browser will process the data here. Response structure Status line HTTP/1.1 200 OK200 indicates that the response status number, and the “OK” is the explanation of the status. Response Header Response Body &lt;h1&gt;Home page&lt;/h1&gt; RESTful API CRUD Create/Read/Update/Delete matches HTTP POST/GET/PUT/DELETE server is stateless No need to involve other requests when handling the request. TicketMaster API Request URL of discover API protocol://hostname:port/endpoint?query : protocol: https hostname: app.ticketmaster.com endpoint: /discovery/v2/events.json query: APIkey: it’s required by TicketMaster API for authn/authz GeoPoint: lat/long since our search is based on client location Radius: radius of search area Keyword: search a specific kind of events example https://app.ticketmaster.com/discovery/v2/events.json?apikey=12345&amp;geoPoint=abcd&amp;keyword=music&amp;radius=50 Headers and Body: nothing to set since it’s not required for this API. Response data we need is located in _embedded(JSON Object) -&gt; events(JSON Array) -&gt; item object(JSON Object) Implementation Create a new Package external in src Create a new class TicketMasterAPI Add some constants 123​private static final String URL = "https://app.ticketmaster.com/discovery/v2/events.json";​private static final String DEFAULT_KEYWORD = ""; // no restriction​private static final String API_KEY = "USE_YOUR_OWN_KEY"; Add a search function 123456789/*** Search the keyword through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional*/public JSONArray search(double lat, double lon, String keyword) &#123; return null;&#125; Add queryAPI helper 12345678910111213141516/*** print the results of search(lat, lon)* @param lat latitude* @param lon longitude*/private void queryAPI(double lat, double lon) &#123; JSONArray events = search(lat, lon, null); try &#123; for (int i = 0; i &lt; events.length(); i++) &#123; JSONObject event = events.getJSONObject(i); System.out.println(event); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; Add GeoHash helper to convert lat, lon to geoPoint. Copy the code from http://developer-should-know.com/post/87283491372/geohash-encoding-and-decoding-algorithm Implement search(lat,lon,keyword) function 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*** Search the JSONArray results through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional* @return JSONArray*/public JSONArray search(double lat, double lon, String keyword) &#123; JSONArray ret = new JSONArray(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = events; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Create a new package entity and a new class Item(entity表示servelet储存数据的类) 123456789101112131415161718192021222324252627/*** Item of event* @author andaluo**/public class Item &#123; private String itemId; private String name; private double rating; private String address; private Set&lt;String&gt; categories; private String imageURL; private String url; private double distance; public JSONObject toJSONObject() &#123; JSONObject obj = new JSONObject(); try &#123; obj.put("item_id", itemId); obj.put("name", name); obj.put("rating", rating); // ... &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return obj; &#125; Use builder pattern to create Item class 12345678910111213141516171819202122232425262728293031323334353637383940414243 /** * A helper class to build the Item class * @author andaluo * */ public static class ItemBuilder&#123; private String itemId; private String name; // ... /** * Construct the Item using builder * @return */ public Item build() &#123; return new Item(this); &#125; /** * return the builder itself to support continuous operation. * @param itemId * @return */ public ItemBuilder setItemId(String itemId) &#123; this.itemId = itemId; return this; &#125; //... &#125; /** * Builder pattern to create a class * @param builder */ public Item(ItemBuilder builder) &#123; this.itemId = builder.itemId; this.name = builder.name; // ... // when build the item we get public static void main(String[] args) &#123;Item item = new Item.ItemBuilder().setAddress("abc").setDistance(19).build(); &#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Reverse A Linked List]]></title>
    <url>%2F2019%2F04%2F09%2FHow%20to%20Reverse%20A%20Linked%20List%2F</url>
    <content type="text"><![CDATA[Reverse linked list corner case 12dummy-&gt;1-&gt;nulldummy-&gt;null general case 1234567891011dummy-&gt; 1 -&gt; 2 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre nextNode cur dummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 3 -&gt; 2 -&gt; 1 -&gt; nullpre cur nextNode link cur to the next node cur.next = nextNode.next link nextNode to the head of the reversed part nextNode.next = pre.next link pre to the nextNode pre.next = nextNode update nextNode to next nextNode = cur.next when nextNode gets to the end, exit cur represents the tail, and pre represents the the dummy, nextNode represents the node waiting to be added to the head of the list.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] HTML Basic]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20HTML%20Basic%2F</url>
    <content type="text"><![CDATA[HTML BasicHow Internet works(High Level) ​find the right address www.google.com -&gt; 172.217.8.132 Your query is submitted to your ISP( Internet service provider) DNS(Domain Name System) takes the domain name and turns it into URI a request is sent to the server and then the server response whatever requested, in this case, it is the combination of html, css and JavaScript the browser display the website. Basic Web Technologies HTML: Structure CSS: Style JavaScript: Interaction Tags Hypertext Markup Language Tags 123456789101112131. &lt;!DOCTYPE&gt; (声明)2. &lt;html&gt;3. &lt;body&gt;4. &lt;ul&gt;5. &lt;div&gt;6. &lt;span&gt;7. &lt;a&gt;8. &lt;img&gt;9. &lt;header&gt;10. &lt;nav&gt;11. &lt;section&gt;12. &lt;aside&gt;13. &lt;footer&gt; &lt;!DOCTYPE&gt; &lt;!DOCTYPE&gt; declaration is not an HTML tag it is an instruction to the web browser about what version of HTML the page is written in and how to render the content always add the &lt;!DOCTYPE&gt; declaration to your HTML documents. html5的声明是&lt;!DOCTYPE html&gt; &lt;head&gt; provides general information (metadata) about the document,including its title and links to its scripts and style sheets. after &lt;html&gt; tag only 1 pair of &lt;head&gt; tag in a html document &lt;title&gt; can only be placed here. &lt;meta charset=&quot;UTF-8&quot;&gt; set the charSet of this page &lt;body&gt;​- represents the content of an HTML document.​- after &lt;head&gt; tag but on the same level only 1 pair of &lt;body&gt; element in a document contains: 标题标签 &lt;h1&gt; - &lt;h6&gt; 段落标签 &lt;p&gt; 注释标签 &lt;!-- comment -- &gt; 水平线标签 &lt;hr&gt;(单标签) 换行标签 &lt;br&gt;（单标签） 文本节标签 &lt;span&gt; &lt;ul&gt; Unordered list represents an unordered list of items typically rendered as a bulleted list uses with &lt;li&gt; &lt;ol&gt; ordered list &lt;li&gt; represent an item in a list. must be contained in a parent element: an ordered list &lt;ol&gt;, an unordered list &lt;ul&gt;, or a menu &lt;menu&gt;. &lt;a&gt; 超级链接 creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL. &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; href attribute: contains a URL or a URL fragment that the hyperlink points to. #: link to an element with a specified id within the page (like href=”#top”) target attribute: _blank vs. _self example12&lt;a href="http://www.google.com" target="_blank"&gt;&lt;/a&gt;&lt;!-- _blank means open in new tag, _self means open in this tag---&gt; &lt;img&gt;图片标签（单标签） defines an image in an HTML page. has two required attributes: src and alt: &lt;img src=”” alt=”” &gt; has no end tag(self-closing tag). if the image is broken, then the alternative name shows up. Blocks &lt;div&gt; the generic container for flow content and does not inherently represent anything. use it to group elements for purposes. recall&lt;span&gt; a generic inline container for phrasing content. does not inherently represent anything. use it to group elements for purposes. &lt;div&gt; vs. &lt;span&gt; find all block elements and inline elements after the class &lt;p&gt; 另起一行，因此也属于块状标签 Semantic Tags A semantic element clearly describes its meaning to both the browser and the developer. 语义标签 examples of non-semantic elements: &lt;div&gt; and &lt;span&gt; - tells nothing about its content. examples of semantic elements: &lt;form&gt;, &lt;table&gt;, and &lt;article&gt; - clearly defines its content. Semantic elements &lt;header&gt; 页眉:represents a container for introductory content or a set of navigational links. &lt;section&gt; 区块:represents a standalone section of functionality contained within an HTML document, typically with a heading, which doesn’t have a more specific semantic element to represent it. &lt;aside&gt; 侧边栏:represents a section of a document with content connected tangentially to the main content of the document (often presented as a sidebar). &lt;nav&gt; 导航:represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. &lt;footer&gt; 页脚:defines a footer for a document or section which contain information about its containing element. Project Structure structure 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="description" content="Item Recommendation"&gt; &lt;meta name="author" content="Your Name"&gt; &lt;title&gt;Item Recommendation Final&lt;/title&gt;&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;nav&gt; &lt;a href=""&gt;Home&lt;/a&gt; &lt;a href="#name"&gt;Contact&lt;/a&gt; &lt;a href=""&gt;About&lt;/a&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div&gt; &lt;header&gt; &lt;p&gt; &lt;span&gt;Item&lt;/span&gt; &lt;i id="avatar" class="avatar fa fa-user fa-2x"&gt;Icon&lt;/i&gt; &lt;br&gt; Recommendation &lt;/p&gt; &lt;/header&gt; &lt;section&gt; &lt;aside&gt; &lt;nav&gt; &lt;a href="#"&gt;Nearby&lt;/a&gt; &lt;a href="#"&gt;My Favorites&lt;/a&gt; &lt;a href="#"&gt;Recommendation&lt;/a&gt; &lt;/nav&gt; &lt;/aside&gt; &lt;ul&gt; &lt;li&gt; &lt;img src="https://s1.ticketm.net/dam/c/48b/2352e3b5-8496-496b-97a3-e605177e848b_105851_ARTIST_PAGE_3_2.jpg" /&gt; &lt;div&gt; &lt;a href="#"&gt;Item&lt;/a&gt; &lt;p&gt;Music&lt;/p&gt; &lt;/div&gt; &lt;p&gt;99 Grove Street&lt;br/&gt;San Francisco&lt;br/&gt; CA&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;/div&gt; &lt;footer&gt; &lt;p&gt;What We Do&lt;/p&gt; &lt;p&gt;"Help you find the best place around."&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Example office, CA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;info@example.com&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;+1 800 123 456&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; Use FontAwesome to get icon. Add the css to 123&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot;&gt; &lt;i id=&quot;avatar&quot; class=&quot;avatar fa fa-user fa-2x&quot;&gt;&lt;/i&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Java Servlet]]></title>
    <url>%2F2019%2F04%2F05%2F%5BNotes%5D%20Java%20Servlet%2F</url>
    <content type="text"><![CDATA[ServletREST(Representational State Transfer) REST is web server design pattern Operations are directly based on HTTP methods, so that server don’t need to parse extra thing URL clearly indicates which resource a client want, easy for client side users to understand. Server is running in stateless mode, improve scalability. Create Jupyter Project &amp;&amp; SearchItem Servlet Create Dynamic Project called “Jupiter” Add Tomcat 9.0 to its Java Build Path Add And Remove project Jupyter to existed Tomcat server Create java Servlet in Jupyter project, name it SearchItem and name the package rpc It should contain a doGet() and doPost() change the mapping url 1234// better style to set them all lowercase// 可以直接在创建servlet的页面修改@WebServlet("/SearchItem") // by default@WebServlet("/search") Handle the doGet() method by adding tutorial code 1234567891011// response.getWriter()表示得到response的输出流PrintWriter out = response.getWriter();// request.getParameter表示获取request中的body的参数信息if (request.getParameter("username") != null) &#123; String username = request.getParameter("username"); out.print("Hello " + username);&#125;// 一定要关闭这个输出流out.close(); test the input 1http://localhost:8080/Jupiter/search?username=abcd return a HTML page 123456789// 需要告诉浏览器页面的类型，渲染成所需的格式response.setContentType("text/html");PrintWriter out = response.getWriter();out.println("&lt;html&gt;&lt;body&gt;");out.println("&lt;h1&gt;This is a HTML page&lt;/h1&gt;");out.println("&lt;/body&gt;&lt;/html&gt;");out.close(); add Java-json jar support to the WebContent-WebInf-lib test json support 12345678910111213141516// 把页面设置成json键值对格式response.setContentType("application/json");PrintWriter out = response.getWriter();String username = "";if (request.getParameter("username") != null) &#123; username = request.getParameter("username");&#125;JSONObject obj = new JSONObject();try &#123; obj.put("username", username);&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(obj);out.close(); test jason array 123456789101112response.setContentType("application/json");PrintWriter out = response.getWriter();//json array 存储多个键值对JSONArray array = new JSONArray();try &#123; array.put(new JSONObject().put("username", "abcd")); array.put(new JSONObject().put("username", "1234"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(array);out.close(); Create RecommendItem Servlet Create another Servlet called RecommendItem under prc package, and change the mapping url practice on JSONArray12345678910111213141516// 1. set content typeresponse.setContentType("application/json");// 2. get output stream of responsePrintWriter out = response.getWriter();// 3. create json arrayJSONArray arr = new JSONArray();try &#123; // 4. create JSONObject and put those in the JSONArray arr.put(new JSONObject().put("name", "abcd").put("address", "san francisco").put("time","01/01/2017")); arr.put(new JSONObject().put("name", "1234").put("address", "san jose").put("time","01/02/2017"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;// 5. print the resultout.print(arr);out.close(); Add RpcHelper utility class create regular class RpcHelper under rpc package add writeJSONObject(response, JSONObject) 123456789101112131415public static void writeJSONObject(HttpServletResponse response , JSONObject obj) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter PrintWriter out = response.getWriter(); // 4. 写入 out.print(obj); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; add writeJSONArray(response, JSONArray) 123456789101112131415public static void writeJSONArray(HttpServletResponse response , JSONArray array) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter out = response.getWriter(); // 4. 写入 out.print(array); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; now apply the helper to the SearchItem and RecommendationItem TicketMaster API An web based API provided by TicketMaster so that clients and get real events data from TicketMaster server. You cannot see the source code of it, but you can refer to the documentation to figure out how to use the interface to make connection by sending request to it’s backend. It’s required by TicketMaster API so that it’ll know who is using their API. To get your API key, you need to register on this website: http://developer.ticketmaster.com, and you’ll see your API key when we navigate to API details. The bottle neck of this project is TicketMaster API, since we cannot control its performance. If we have to optimize it, we can create a cache. Or we can make another API. Make a copy each time we query something from TicketMaster. If TicketMaster is down. We can query local copy of nearest geo point.模仿一个曲线拟合的过程，即模糊搜索]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Web Application Basic]]></title>
    <url>%2F2019%2F04%2F04%2F%5BNotes%5D%20Web%20Application%20Basic%2F</url>
    <content type="text"><![CDATA[Web ApplicationDependencies: Java 8 Eclipse EE Postman Tomcat Web Application: Clients -&gt;Internet-&gt; Server Server(Backend) Client(Frontend): User interface Internet TCP/IP区别： IP对应特定机器的地址，TCP对应特定机器特定进程的地址 TCP通过端口来监听请求，请求包括IP和端口号 在浏览器输入www.example.com会发生什么？ (client) client opens browser and goes to an Internet address (IP address/URL/hostname) and asks for page for (http://www.example.com), which means “I want to see ‘http://www.example.com/index.html’” (network) Internet redirects your request “I want to see ‘http://www.example.com’” to example’s server (a set of web servers) (server) One of example’s server sends a response to your Internet address (ip address). The response contains a HTML page. We will talk about HTML later. (network) The response goes through the Internet and received by your browser. (client) Your browser receives the response from example’s server and the HTML page contained in it. Render the page view and present to you. How to view the HTML page source? (Right click, and view page source) 如何设计web app? 三层结构 presentation tier 直接与用户交互 logic tier 应用具体的逻辑 data tier 数据库 Tomcat 提供web server RPC(remote procedure call) 调用一个远端机器上的API Java Servlet 服务器端负责处理RPC的java class Tomcat 存放servlet的环境，负责接受请求并分配到对应的servlet处理,把处理的结果传给正确的客户 Tomcat配置 在properties里面点一下switch location找配置文件 server location改成 use tomcat installation 地址localhost:8080 Http request methods GET(read in general) POST(write in general) PUT(write) DELETE(write) URL(Unique Resource Locator) format: 123456+ protocal(http/https)+ hostname(www.youtube.com)+ port(8080): which process+ endpoint: The name and location of the requested resource, under the server base directory. 相当于要触发的服务或功能+ query: separated from the preceding part by a question mark (?), containing a query string of attribute–value pairs separated by a delimiter. 相当于参数+ example: ```https://www.youtube.com/results?search_query=example example: 12. url会自动将空格转码成```&quot;20%&quot; 如果要inplace操作的话，先扫一遍找出空格数，然后再扩容字符串，然后冲后往前填。 http request body: 包含http request的数据 POST的body信息通常是隐藏的,GET通常没有必要隐藏 request例子 1234567891011121314151617181920212223242526JSON(JavaScript Object Notation)&#123;“instructor”: &#123; &quot;company&quot;: &quot;Laioffer&quot;, &quot;course&quot;: “Project” , &quot;name&quot;: “Vincent”&#125; &#125;// Alternative formatsXML: eXtensible Markup Language&lt;instructor&gt;&lt;company&gt;Laioffer&lt;/company&gt;&lt;course&gt;Project&lt;/course&gt;&lt;name&gt;Vincent&lt;/name&gt;&lt;/instructor&gt;ProtocolBufferInstructor &#123;company = “Laioffer”,course= “Project”name= “Vincent”&#125; JSON简洁一些，xml长一些，ProtocalBuffer更新效率更高。前两种都是字符串，后一种是java class，相当于二进制文件，需要额外支持。]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bitwise operation位运算相关]]></title>
    <url>%2F2019%2F03%2F29%2Fbitwise%20operation%2F</url>
    <content type="text"><![CDATA[1. How to check odd numbern &amp; 1 means comparing last digit of binary number to 1 12def is_odd(n): return n &amp; 1 == 1 2. Float divisionn &gt;&gt; 1 means n floor divides 2 12&gt;&gt;&gt; 5 &gt;&gt; 12]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Leetcode] 3. Longest Substring Without Repeating Characters]]></title>
    <url>%2F2019%2F03%2F28%2F3.%20Longest%20Substring%20Without%20Repeating%20Characters%2F</url>
    <content type="text"><![CDATA[meidumGiven a string, find the length of the longest substring without repeating characters. Example 1: 123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: 123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: 1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution1: def lengthOfLongestSubstring(self, s): """ :type s: str :rtype: int """ # DFS solution O(n2) if not s: return 0 memo = set() self.max_length = float('-inf') for i in range(len(s)): if self.max_length &gt;= len(s) - i: break self.helper("", i, s, memo) return self.max_length def helper(self, path, ind, string, memo): self.max_length = max(self.max_length, len(path)) if ind &gt;= len(string): return if string[ind] not in path: path+=string[ind] # print(path) self.helper(path, ind+1, string, memo) return class Solution2: # sliding window # O(2n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 i = j = 0 res = 0 memo = set() while i &lt; len(s) and j &lt; len(s): if s[j] not in memo: memo.add(s[j]) res = max(res, j - i + 1) j+=1 else: memo.remove(s[i]) i += 1 return res class Solution: # sliding window optimized using map # O(n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 res = 0 i = j = 0 dic = &#123;&#125; while j &lt; len(s): if s[j] in dic: i = max(dic[s[j]], i) res = max(res, j - i + 1) dic[s[j]] = j + 1 j+=1 return res]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld]]></title>
    <url>%2F2019%2F03%2F28%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[长风破浪会有时，直挂云帆济沧海！]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
