<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Notes] Java Servlet]]></title>
    <url>%2F2019%2F04%2F05%2F%5BNotes%5D%20Java%20Servlet%2F</url>
    <content type="text"><![CDATA[ServletREST(Representational State Transfer) REST is web server design pattern Operations are directly based on HTTP methods, so that server don’t need to parse extra thing URL clearly indicates which resource a client want, easy for client side users to understand. Server is running in stateless mode, improve scalability. Create Jupyter Project &amp;&amp; SearchItem Servlet Create Dynamic Project called “Jupiter” Add Tomcat 9.0 to its Java Build Path Add And Remove project Jupyter to existed Tomcat server Create java Servlet in Jupyter project, name it SearchItem and name the package rpc It should contain a doGet() and doPost() change the mapping url 1234// better style to set them all lowercase// 可以直接在创建servlet的页面修改@WebServlet("/SearchItem") // by default@WebServlet("/search") Handle the doGet() method by adding tutorial code 1234567891011// response.getWriter()表示得到response的输出流PrintWriter out = response.getWriter();// request.getParameter表示获取request中的body的参数信息if (request.getParameter("username") != null) &#123; String username = request.getParameter("username"); out.print("Hello " + username);&#125;// 一定要关闭这个输出流out.close(); test the input 1http://localhost:8080/Jupiter/search?username=abcd return a HTML page 123456789// 需要告诉浏览器页面的类型，渲染成所需的格式response.setContentType("text/html");PrintWriter out = response.getWriter();out.println("&lt;html&gt;&lt;body&gt;");out.println("&lt;h1&gt;This is a HTML page&lt;/h1&gt;");out.println("&lt;/body&gt;&lt;/html&gt;");out.close(); add Java-json jar support to the WebContent-WebInf-lib test json support 12345678910111213141516// 把页面设置成json键值对格式response.setContentType("application/json");PrintWriter out = response.getWriter();String username = "";if (request.getParameter("username") != null) &#123; username = request.getParameter("username");&#125;JSONObject obj = new JSONObject();try &#123; obj.put("username", username);&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(obj);out.close(); test jason array 123456789101112response.setContentType("application/json");PrintWriter out = response.getWriter();//json array 存储多个键值对JSONArray array = new JSONArray();try &#123; array.put(new JSONObject().put("username", "abcd")); array.put(new JSONObject().put("username", "1234"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(array);out.close(); Create RecommendItem Servlet Create another Servlet called RecommendItem under prc package, and change the mapping url practice on JSONArray12345678910111213141516// 1. set content typeresponse.setContentType("application/json");// 2. get output stream of responsePrintWriter out = response.getWriter();// 3. create json arrayJSONArray arr = new JSONArray();try &#123; // 4. create JSONObject and put those in the JSONArray arr.put(new JSONObject().put("name", "abcd").put("address", "san francisco").put("time","01/01/2017")); arr.put(new JSONObject().put("name", "1234").put("address", "san jose").put("time","01/02/2017"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;// 5. print the resultout.print(arr);out.close(); Add RpcHelper utility class create regular class RpcHelper under rpc package add writeJSONObject(response, JSONObject) 123456789101112131415public static void writeJSONObject(HttpServletResponse response , JSONObject obj) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter PrintWriter out = response.getWriter(); // 4. 写入 out.print(obj); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; add writeJSONArray(response, JSONArray) 123456789101112131415public static void writeJSONArray(HttpServletResponse response , JSONArray array) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter out = response.getWriter(); // 4. 写入 out.print(array); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; now apply the helper to the SearchItem and RecommendationItem TicketMaster API [Pic] An web based API provided by TicketMaster so that clients and get real events data from TicketMaster server. You cannot see the source code of it, but you can refer to the documentation to figure out how to use the interface to make connection by sending request to it’s backend. It’s required by TicketMaster API so that it’ll know who is using their API. To get your API key, you need to register on this website: http://developer.ticketmaster.com, and you’ll see your API key when we navigate to API details. The bottle neck of this project is TicketMaster API, since we cannot control its performance. If we have to optimize it, we can create a cache. Or we can make another API. Make a copy each time we query something from TicketMaster. If TicketMaster is down. We can query local copy of nearest geo point.模仿一个曲线拟合的过程，即模糊搜索]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Web Application Basic]]></title>
    <url>%2F2019%2F04%2F04%2F%5BNotes%5D%20Web%20Application%20Basic%2F</url>
    <content type="text"><![CDATA[Web ApplicationDependencies: Java 8 Eclipse EE Postman Tomcat Web Application: Clients -&gt;Internet-&gt; Server Server(Backend) Client(Frontend): User interface Internet TCP/IP区别： IP对应特定机器的地址，TCP对应特定机器特定进程的地址 TCP通过端口来监听请求，请求包括IP和端口号 在浏览器输入www.example.com会发生什么？ (client) client opens browser and goes to an Internet address (IP address/URL/hostname) and asks for page for (http://www.example.com), which means “I want to see ‘http://www.example.com/index.html’” (network) Internet redirects your request “I want to see ‘http://www.example.com’” to example’s server (a set of web servers) (server) One of example’s server sends a response to your Internet address (ip address). The response contains a HTML page. We will talk about HTML later. (network) The response goes through the Internet and received by your browser. (client) Your browser receives the response from example’s server and the HTML page contained in it. Render the page view and present to you. How to view the HTML page source? (Right click, and view page source) 如何设计web app? 三层结构 presentation tier 直接与用户交互 logic tier 应用具体的逻辑 data tier 数据库 Tomcat 提供web server RPC(remote procedure call) 调用一个远端机器上的API Java Servlet 服务器端负责处理RPC的java class Tomcat 存放servlet的环境，负责接受请求并分配到对应的servlet处理,把处理的结果传给正确的客户 Tomcat配置 在properties里面点一下switch location找配置文件 server location改成 use tomcat installation 地址localhost:8080 Http request methods GET(read in general) POST(write in general) PUT(write) DELETE(write) URL(Unique Resource Locator) format: 123456+ protocal(http/https)+ hostname(www.youtube.com)+ port(8080): which process+ endpoint: The name and location of the requested resource, under the server base directory. 相当于要触发的服务或功能+ query: separated from the preceding part by a question mark (?), containing a query string of attribute–value pairs separated by a delimiter. 相当于参数+ example: ```https://www.youtube.com/results?search_query=example example: 12. url会自动将空格转码成```&quot;20%&quot; 如果要inplace操作的话，先扫一遍找出空格数，然后再扩容字符串，然后冲后往前填。 http request body: 包含http request的数据 POST的body信息通常是隐藏的,GET通常没有必要隐藏 request例子 1234567891011121314151617181920212223242526JSON(JavaScript Object Notation)&#123;“instructor”: &#123; &quot;company&quot;: &quot;Laioffer&quot;, &quot;course&quot;: “Project” , &quot;name&quot;: “Vincent”&#125; &#125;// Alternative formatsXML: eXtensible Markup Language&lt;instructor&gt;&lt;company&gt;Laioffer&lt;/company&gt;&lt;course&gt;Project&lt;/course&gt;&lt;name&gt;Vincent&lt;/name&gt;&lt;/instructor&gt;ProtocolBufferInstructor &#123;company = “Laioffer”,course= “Project”name= “Vincent”&#125; JSON简洁一些，xml长一些，ProtocalBuffer更新效率更高。前两种都是字符串，后一种是java class，相当于二进制文件，需要额外支持。]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bitwise operation位运算相关]]></title>
    <url>%2F2019%2F03%2F29%2Fbitwise%20operation%2F</url>
    <content type="text"><![CDATA[1. How to check odd numbern &amp; 1 means comparing last digit of binary number to 1 12def is_odd(n): return n &amp; 1 == 1 2. Float divisionn &gt;&gt; 1 means n floor divides 2 12&gt;&gt;&gt; 5 &gt;&gt; 12]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Leetcode] 3. Longest Substring Without Repeating Characters]]></title>
    <url>%2F2019%2F03%2F28%2F3.%20Longest%20Substring%20Without%20Repeating%20Characters%2F</url>
    <content type="text"><![CDATA[meidumGiven a string, find the length of the longest substring without repeating characters. Example 1: 123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: 123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: 1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution1: def lengthOfLongestSubstring(self, s): """ :type s: str :rtype: int """ # DFS solution O(n2) if not s: return 0 memo = set() self.max_length = float('-inf') for i in range(len(s)): if self.max_length &gt;= len(s) - i: break self.helper("", i, s, memo) return self.max_length def helper(self, path, ind, string, memo): self.max_length = max(self.max_length, len(path)) if ind &gt;= len(string): return if string[ind] not in path: path+=string[ind] # print(path) self.helper(path, ind+1, string, memo) return class Solution2: # sliding window # O(2n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 i = j = 0 res = 0 memo = set() while i &lt; len(s) and j &lt; len(s): if s[j] not in memo: memo.add(s[j]) res = max(res, j - i + 1) j+=1 else: memo.remove(s[i]) i += 1 return res class Solution: # sliding window optimized using map # O(n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 res = 0 i = j = 0 dic = &#123;&#125; while j &lt; len(s): if s[j] in dic: i = max(dic[s[j]], i) res = max(res, j - i + 1) dic[s[j]] = j + 1 j+=1 return res]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld]]></title>
    <url>%2F2019%2F03%2F28%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[长风破浪会有时，直挂云帆济沧海！]]></content>
      <categories>
        <category>personal</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
