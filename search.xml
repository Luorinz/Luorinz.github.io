<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Notes] MySQL Basic 2]]></title>
    <url>%2F2019%2F04%2F16%2F%5BNotes%5D%20MySQL%20Basic%202%2F</url>
    <content type="text"><![CDATA[Save search results to database Under db.mysql package, create class/MySQLConnection.java. Implement DBConnection interface Implement both close method and constructor. 1234567891011121314151617181920212223242526// connectionprivate Connection conn;// constructorpublic MySQLConnection() &#123; try &#123; Class.forName("com.mysql.jdbc.Driver").newInstance(); conn = DriverManager.getConnection(MySQLDBUtil.URL); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;/** * close the connection */@Overridepublic void close() &#123; if (conn != null) &#123; try &#123; conn.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; implement searchItems() in MySQLConnection. Previously we call TicketMasterAPI.search from our SearchItem servlet directly. But actually our recommendation code also needs to call the same search function, so we make a designated function here to do the search call.The code is simply copied from what we’ve already had in SearchItem.java. 1234567891011121314/** * Search Item. Same as TMAPI search item. */@Overridepublic List&lt;Item&gt; searchItems(double lat, double lon, String term) &#123; // Get the items from TM TicketMasterAPI tmAPI = new TicketMasterAPI(); List&lt;Item&gt; items = tmAPI.search(lat, lon, term); // Save the items to the db for (Item item: items) &#123; saveItem(item); &#125; return items;&#125; after searchItem, let’s try saveItem to save data into database. Again, careful with the import suggestions. Always choose java.sql.*. 1234567891011121314151617181920212223242526272829303132333435/** * Save single item into db */@Overridepublic void saveItem(Item item) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "INSERT IGNORE INTO items VALUES (?, ?, ?, ?, ?, ?, ?)"; PreparedStatement stmt = conn.prepareStatement(sql); // Index starts from 1 stmt.setString(1, item.getItemId()); stmt.setString(2, item.getName()); stmt.setDouble(3, item.getRating()); stmt.setString(4, item.getAddress()); stmt.setString(5, item.getImageURL()); stmt.setString(6, item.getUrl()); stmt.setDouble(7, item.getDistance()); stmt.execute(); // set categories sql = "INSERT IGNORE INTO categories VALUES(?, ?)"; stmt = conn.prepareStatement(sql); for (String category: item.getCategories()) &#123; stmt.setString(1, item.getItemId()); stmt.setString(2, category); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; Use PreparedStatement and stmt.settring() can effectively avoid SQL injection. PreparedStatement is faster than raw String. Only have to create it once. SQL injection. Turns the input to the SQL statement, and makes the query always true. 123456789101112// SQL injection// Example:// SELECT * FROM users WHERE username = '&lt;username&gt;' AND password = '&lt;password&gt;';//// sql = "SELECT * FROM users WHERE username = '" + username + "'// AND password = '" + password + "'"//// username: aoweifjoawefijwaoeifj// password: 123456' OR '1' = '1//// SELECT * FROM users WHERE username = 'aoweifjoawefijwaoeifj' AND password = '123456' OR '1' = '1' update DBConnectionFactory. 1234567891011public static DBConnection getConnection(String db) &#123; switch (db) &#123; case "mysql": return new MySQLConnection(); case "mongodb": // return new MongoDBConnection(); return null; default: throw new IllegalArgumentException("Invalid db: " + db); &#125;&#125; In src/rpc/SearchItem.java, add a private dbconnection field and update doGet(). 1234567891011121314151617181920212223242526/** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); // Connect db first then search DBConnection conn = DBConnectionFactory.getConnection(); List&lt;Item&gt; items = conn.searchItems(lat, lon, keyword); JSONArray array = new JSONArray(); try &#123; for (Item item : items) &#123; JSONObject obj = item.toJSONObject(); array.put(obj); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; RpcHelper.writeJSONArray(response, array);&#125; Implement set/unset favorite related functions let’s try setFavoriteItem and unsetFavoriteItem 123456789101112131415161718192021222324252627282930313233343536373839404142/** * Operate on History table. * insert favorite information. */@Overridepublic void setFavoriteItems(String userId, List&lt;String&gt; itemIds) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "INSERT IGNORE INTO history (?, ?)"; PreparedStatement stmt = conn.prepareStatement(sql); for (String itemId: itemIds) &#123; stmt.setString(1, userId); stmt.setString(2, itemId); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;/** * Delete favorite information */@Overridepublic void unsetFavoriteItems(String userId, List&lt;String&gt; itemIds) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "DELETE FROM history WHERE user_id = ? AND item_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); for (String itemId: itemIds) &#123; stmt.setString(1, userId); stmt.setString(2, itemId); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; create a new servlet called ItemHistory, update the url mapping to \history create a new function in RpcHelper.java to parse HTTP request body. Imagine the input HTTP request looks like: 1234567&#123; user_id = “1111”, favorite = [ “abcd”, “efgh”, ]&#125; 1234567891011121314151617181920/** * Read the http request and parse it as a JSONObject. * @param request * @return */public static JSONObject readJsonObject(HttpServletRequest request) &#123; StringBuilder sb = new StringBuilder(); try &#123; BufferedReader reader = request.getReader(); String line = null; while ((line = reader.readLine()) != null) &#123; sb.append(line); &#125; reader.close(); return new JSONObject(sb.toString()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125; update doPost() and doDelete in ItemHistory.java to use this new function. 1234567891011121314151617181920212223242526272829/** * Get the set favourite request and do the corresponding operation */protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; try &#123; // get userId, itemIDs from request JSONObject input = RpcHelper.readJsonObject(request); String userId = input.getString("user_id"); JSONArray fav_array = input.getJSONArray("favorite"); List&lt;String&gt; itemIds = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; fav_array.length(); i++) &#123; itemIds.add(fav_array.get(i).toString()); &#125; // connect db and update the table DBConnection conn = DBConnectionFactory.getConnection(); conn.setFavoriteItems(userId, itemIds); conn.close(); RpcHelper.writeJSONObject(response, new JSONObject().put("result", "SUCCESS")); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;/*** Same as doPost(), but change setFavoriteItems() to unsetFavoriteItems()*/protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; open postman, switch to post method, use http://localhost:8080/Jupiter/history, then copy the following JSON object into body. Replace item_id1 and item_id2 with the real item_id exist in your item table. 1234567&#123; 'user_id':'1111', 'favorite' : [ 'item_id1', 'item_id2' ]&#125; now let’s send another request to test our delete function. Open another tab in postman, switch method to delete, use http://localhost:8080/Jupiter/history, then copy the following JSON object into body. Again replace item_id1 with the real item_id exist in your history table.123456&#123; 'user_id':'1111', 'favorite' : [ 'item_id1', ]&#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] JavaScript Basic]]></title>
    <url>%2F2019%2F04%2F14%2F%5BNotes%5D%20JavaScript%20Basic%2F</url>
    <content type="text"><![CDATA[Linking JavaScript file and html fileAdding JavaScript into an HTML DocumentYou can add JavaScript code in an HTML document by employing the dedicated HTML tag&lt;script&gt; that wraps around JavaScript code.The &lt;script&gt; tag can be placed in the &lt;head&gt; section of your HTML, in the &lt;body&gt; section, or after the &lt;/body&gt; close tag, depending on when you want the JavaScript to load. Method 1: Inline Mode 不便于代码分离 Method 2: using &lt;script&gt; tagThe &lt;script&gt; tag can be placed in the &lt;head&gt; section of your HTML, in the &lt;body&gt; section, or after the &lt;/body&gt; close tag, depending on when you want the JavaScript to load. Internal Style External Style 浏览器先执行完&lt;script&gt;tag才会渲染其他组件 JavaScript Fundamentalsvariables three ways of variable declaration: let var const We use those three keywords to create variables in JavaScript. Example: let message; or var message; or const message; var variables are defined from the beginning of the function, no matter where the definition is. var has no block scope. var can be declared many times, but let and const cannot in the same scope. const is used to declare a constant (unchanging) variable(immutable) let has only block scope, while var can be global Data TypesJavaScript is “dynamically typed”, meaning that there are data types, but variables are not bound to any of them. Date types: Number, String, Boolean, Object, Function, Null, Undefined Number - The number type serves both for integer and floating point numbers: 123, 12.22.. Note: NaN belong to the type number but it’s not “normal” numbers. NaN represents an error. String - A string may consist of only one character or many of them. Double and single quotes have no difference between them in JavaScript. E.g. ‘aba’, “I am a string.” Boolean - The boolean type has only two values: true and false. Null - A special value which is for unknown values. In JavaScript null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.It’s just a special value which has the sense of “nothing”, “empty” or “value unknown”. Example: var age = null;The code above states that the age is unknown or empty for some reason. Undefined - A special value which is for unassigned values. The meaning of undefined is “value is not assigned”. Undefined 和 null 不是数据类型，而是特殊值 Function and Object will cover on the following section. typeof Operator returns the type of the argument. It’s useful when we want to process values of different types differently, or just want to make a quick check. e.g. typeof “abc” - string ComparisonsA comparison returns a value. The value is of the boolean type: true or false. Greater/less than: a &gt; b, a &lt; b. Greater/less than or equals: a &gt;= b, a &lt;= b. Equality check is written as a == b (please note the double equation sign =. A single symbol a = b would mean an assignment). Not equals. In maths the notation is ≠, in JavaScript it’s written as an assignment with an exclamation sign before it: a != b. Note:A regular equality check == has a problem. It cannot differ 0 from false: 120 == false // true“” == false // true That’s because operands of different types are converted to a number by the equality operator ==. An empty string, just like false, becomes a zero.1Number(false) =&gt; 0, Number(“”) =&gt; 0 What to do if we’d like to differentiate 0 from false? A strict equality operator === checks the equality without type conversion.In other words, if a and b are of different types, then a===b immediately returns false without an attempt to convert them. 10 === false // false FunctionFunctions are the main “building blocks” of the program. They allow the code to be called many times without repetition. Function Declaration The function keyword goes first, then goes the name of the function, then a list of parameters between the parentheses (empty in the example above) and finally the code of the function, also named “the function body”, between curly braces. Function Expression The meaning of these code samples is the same: “create a function and put it into the variable sayHi”. Object Objects are used to store keyed collections of various data and more complex entities. e.g. Dog object: age, name, color, breed attributes, and run() activity. How to create an instance of object using new keyword E.g. 123var car = new Car(); car.color = “red”; car.type = “suv”; using literal {} 字面量E.g. var car = { color: ‘red’, type: ‘suv’}; Use . or [] to visit attributes. eg 123t2.name; t2['age']; t2['run'](); // function call example Primitive Type VS. Reference Type Numbers, Strings, Booleans, and the null and undefined types are primitive. Objects, and functions are reference types. Difference: A primitive type has a fixed size in memory. For example, a number occupies eight bytes of memory, and a boolean value can be represented with only one bit. A reference type does not have a fixed size in memory. Primitive types are assigned/copied “as a whole value”, but reference types are stored and copied “by reference”. A variable stores not the object itself, but its “address in memory”, in other words “a reference” to it. When an object variable is copied.the reference is copied, the object is not duplicated. Pass by reference and pass by value In JavaScript primitive types are copied and passed by value and objects are copied and passed by reference value. In terms of function: In Pass by Value, function is called by directly passing the value of the variable as the argument. Changing the argument inside the function doesn’t affect the variable passed from outside the function. In Pass by Reference, function is called by directly passing the reference/address of the variable as the argument. Changing the argument inside the function affect the variable passed from outside the function. example ## Hoisting 变量提升 Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Execution Context Global execution context (GEC): This is the default execution context in which JS code start it’s execution when the file first loads in the browser. Functional execution context (FEC): Functional execution context is defined as the context created by the execution of code inside a function. Each function has its own execution context. Execution context stack Execution context stack is a stack data structure to store all the execution stacks created while executing the JS code. Global execution context is present by default in execution context stack and it is at the bottom of the stack. While executing global execution context code, if JS engines finds a function call, it creates functional execution context of that function and pushes that function execution context on top of execution context stack. JS engine executes the function whose execution context is at the top of the execution context stack. Once all the code of the function is executed, JS engines pop’s out that function’s execution context and start’s executing the function which is below it. JavaScript engine creates the execution context in the following two stages: Creation phase and Execution phase. In creation phase, JS engine performs the following task: creates the activation object or the variable object: activation object is a special object in JS which contain all the variables, function arguments and inner functions declarations information. creates the scope chain: Once the activation object gets created, JS engine initializes the scope chain which is a list of all the variables objects inside which the current function exists. This also includes the variable object of global execution context. Scope chain also contains the current function variable object. determines the value of this: After the scope chain, JavaScript engine initialize the value of ‘this’. In the execution phase, JS engines will again scan through the function to update the variable object with the values of the variables and will execute the code.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] MySQL Basic]]></title>
    <url>%2F2019%2F04%2F13%2F%5BNotes%5D%20MySQL%20Basic%2F</url>
    <content type="text"><![CDATA[Database and Database-Management SystemWhat is Database?A database is an organized collection of data. What is Database-Management System?A database-management system (DBMS) is a computer-software application that interacts with end-users, other applications, and the database itself to capture and analyze data. A general-purpose DBMS allows the definition, creation, querying, update, and administration of databases. Why do we need Database?We need to store some data set, a list of events with id, name, address, and date. What will you do? Text File? Excel? The size of list is large( &gt; 1 million users). Add some constraints to some data, such as ID of each user should be different. Create relations between different kind of data, such as users saved some events before. Quickly retrieve data based on given condition, such as retrieve all events happened in San Francisco. Quickly update or delete data based on given condition, such as update all favorite events for a given user. Need access control on the data, meaning only authorized users can have access to the data set. Allow multiple users access(add, search, update, delete) the data set at the same time. A DBMS allows you to fulfill all requirement above easily. Create our database by using MAMPMAMP stands for “My Apache, MySQL, and PHP”. MAMP is an integrated platform you can install on your machine which allows you to have access to a local MySQL server and its PHP server. Click Preferences -&gt; Ports. Make sure Apache Port is 8888 and MySQL port is 8889. Don’t worry about the Nginx port. Start Server-&gt;open phpMyAdmin-&gt;create new project myproject-&gt;use utf8_general_ci as the collation Relational DBMSER (entity-relationship) model: Entity Relation: connect different entities MySQLBasic Concepts Table: a collection of attributions. Similar to what you’ve seen in an excel chart. Each column is an attribute of an entity, and each row is a record/instance of an entity. Row: a single, implicitly structured data item in a table Column: a set of data values of a particular simple type, one for each row of the table Schema: blueprint of how table is constructed. Project Structure CREATE TABLE history (item_id, user_id, ,... FOREIGN KEY item_id REFERENCE item(item_id)) users - store user information. User_id(primary key) password firstname lastname 1111 abcd Rick Sun 2222 efgh Matt Yan items - store item information. item_id(primary key) name rating url abcd event1 5 www.example1.com efgh event1 0 www.example2.com category - store item-category relationship It’s an implementation detail, we could save category in item table, but there will be more string join/split manipulations in our code, so let’s save them in a separate table. item_id category abcd party efgh party efgh sports Set item_id and category both as Primary Key, to map multiple items to multiple items. history - store user favorite history User_id(foreign key) =&gt; user(user_id) item_id time 1111 abcd 01/01/2018 1111 efgh 01/02/2018 2222 efgh 01/03/2018 A few more concept: Unique key: a key in a relational database that is unique for each record. Primary key: Also a key that is unique for each record. Cannot be NULL and used as a unique identifier. Foreign key: a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. Index: improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. MySQL will create index on column which is declared as key. SQL SEQUEL (Structured English QUEry Language) Structured Query Language is a programming language, which is used to communicate with DBMS. The standard language for relational DBMS. Create tables in Java programConnect to database from our Java program by JDBCJust like our Java servlet classes. JDBC provides interfaces and classes for writing database operations. Technically speaking, JDBC (Java Database Connectivity) is a standard API that defines how Java programs access database management systems. Since JDBC is a standard specification, one Java program that uses the JDBC API can connect to any database management system (DBMS), as long as a driver exists for that particular DBMS. download JDBC archive from http://dev.mysql.com/downloads/connector/j/ add the .jar file into your Eclipse lib. You can drag .jar file to WebContent/WEB-INF/lib directly, or copy that file and paste it (if it does not exist). For DB related functions, please always use: import java.sql.xxx; Create our db related package create a new package named db, then add a new interface called DBConnection. Will add support to MySQL and MongoDB later. Add the basic function signature 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384public interface DBConnection &#123; /** * Close the connection. */ public void close(); /** * Insert the favorite items for a user. * * @param userId * @param itemIds */ public void setFavoriteItems(String userId, List&lt;String&gt; itemIds); /** * Delete the favorite items for a user. * * @param userId * @param itemIds */ public void unsetFavoriteItems(String userId, List&lt;String&gt; itemIds); /** * Get the favorite item id for a user. * * @param userId * @return itemIds */ public Set&lt;String&gt; getFavoriteItemIds(String userId); /** * Get the favorite items for a user. * * @param userId * @return items */ public Set&lt;Item&gt; getFavoriteItems(String userId); /** * Gets categories based on item id * * @param itemId * @return set of categories */ public Set&lt;String&gt; getCategories(String itemId); /** * Search items near a geolocation and a term (optional). * * @param userId * @param lat * @param lon * @param term * (Nullable) * @return list of items */ public List&lt;Item&gt; searchItems(double lat, double lon, String term); /** * Save item into db. * * @param item */ public void saveItem(Item item); /** * Get full name of a user. (This is not needed for main course, just for demo * and extension). * * @param userId * @return full name of the user */ public String getFullname(String userId); /** * Return whether the credential is correct. (This is not needed for main * course, just for demo and extension) * * @param userId * @param password * @return boolean */ public boolean verifyLogin(String userId, String password);&#125; Create a concrete class DBConnectionFactory, this class is used to create db instance 12345678910111213141516171819202122public class DBConnectionFactory &#123; // This should change based on the pipeline. private static final String DEFAULT_DB = "mysql"; public static DBConnection getConnection(String db) &#123; switch (db) &#123; case "mysql": // return new MySQLConnection(); return null; case "mongodb": // return new MongoDBConnection(); return null; default: throw new IllegalArgumentException("Invalid db: " + db); &#125; &#125; public static DBConnection getConnection() &#123; return getConnection(DEFAULT_DB); &#125;&#125; create MySQL version of DBConnection implementation create another package db.mysql, which will only contains mysql version of DBConnection implementation. Then create MySQLDBUtil class in db.mysql package. 123456789101112public class MySQLDBUtil &#123; private static final String HOSTNAME = "localhost"; private static final String PORT_NUM = "8889"; // change it to your mysql port number public static final String DB_NAME = "myproject"; private static final String USERNAME = "root"; private static final String PASSWORD = "root"; public static final String URL = "jdbc:mysql://" + HOSTNAME + ":" + PORT_NUM + "/" + DB_NAME + "?user=" + USERNAME + "&amp;password=" + PASSWORD + "&amp;autoReconnect=true&amp;serverTimezone=UTC"; //jdbc:mysql://localhost:8889/myproject?user=root&amp;password=root&amp;autoReconnect=true&amp;serverTimezone=UTC&#125; create a new class called MySQLTableCreation to automatically reset our tables in our database. So in the future, you can run this function every time when you think the data stored in you DB is messed up. first let’s try to connect to MySQL through JDBC connection. Be careful, always use java.sql.* when eclipse ask you to import DB related packages. 123456789101112131415161718192021222324252627public class MySQLTableCreation &#123; // Run this as Java application to reset db schema. public static void main(String[] args) &#123; try &#123; // This is java.sql.Connection. Not com.mysql.jdbc.Connection. Connection conn = null; // Step 1 Connect to MySQL. try &#123; System.out.println("Connecting to " + MySQLDBUtil.URL); Class.forName("com.mysql.jdbc.Driver").getConstructor().newInstance(); conn = DriverManager.getConnection(MySQLDBUtil.URL); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; if (conn == null) &#123; return; &#125; System.out.println("Import is done successfully."); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; Question: What does this do Class.forName(“com.mysql.jdbc.Driver”).newInstance()?Answer: Ensure the driver is registered. We use Class.forName(&quot;com.mysql.jdbc.Driver&quot;).getConstructor().newInstance(); to register jdbc.Driver class to DriverManager, then create an instance of it using conn = DriverManager.getConnection(MySQLDBUtil.URL); 此处为反射机制的应用 after connect to MySQL, let’s try to drop old tables if they’re existed.Syntax: DROP TABLE IF EXISTS table_name; 12345678910111213// Step 2 Drop tables in case they exist.Statement stmt = conn.createStatement();String sql = "DROP TABLE IF EXISTS categories";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS history";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS items";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS users";stmt.executeUpdate(sql); create 4 tables: User, Item, Category, History. Syntax: 123456CREATE TABLE table_name ( column1 datatype, column2 datatype, column3 datatype, ....); 1234567891011121314151617181920212223242526272829303132333435// Step 3 Create new tablessql = "CREATE TABLE items (" + "item_id VARCHAR(255) NOT NULL," + "name VARCHAR(255)," + "rating FLOAT," + "address VARCHAR(255)," + "image_url VARCHAR(255)," + "url VARCHAR(255)," + "distance FLOAT," + "PRIMARY KEY (item_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE categories (" + "item_id VARCHAR(255) NOT NULL," + "category VARCHAR(255) NOT NULL," + "PRIMARY KEY (item_id, category)," + "FOREIGN KEY (item_id) REFERENCES items(item_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE users (" + "user_id VARCHAR(255) NOT NULL," + "password VARCHAR(255) NOT NULL," + "first_name VARCHAR(255)," + "last_name VARCHAR(255)," + "PRIMARY KEY (user_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE history (" + "user_id VARCHAR(255) NOT NULL," + "item_id VARCHAR(255) NOT NULL," + "last_favor_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP," + "PRIMARY KEY (user_id, item_id)," + "FOREIGN KEY (item_id) REFERENCES items(item_id)," + "FOREIGN KEY (user_id) REFERENCES users(user_id))";stmt.executeUpdate(sql); VarChar 指的是变长数组 last_favor_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP 指的是如果没有给值,默认用当前时间填充 com.mysql.jdbc.Driver is deprecated, change to com.mysql.cj.jdbc.Driver Add a fake user. We don’t have register function in our application, so let’s create a user in our database. Syntax: 12INSERT INTO table_name (column1, column2, column3, ...)VALUES (value1, value2, value3, ...); 12345// Step 4: insert datasql = "INSERT INTO users VALUES (" + "'1111', '3229c1097c00d497a0fd282d586be050', 'John', 'Smith')";System.out.println("Executing query: " + sql);stmt.executeUpdate(sql);]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>MySQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] CSS Basic 2]]></title>
    <url>%2F2019%2F04%2F13%2F%5BNotes%5D%20CSS%20Basic%202%2F</url>
    <content type="text"><![CDATA[Box ModelIntroduction The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. Components Content - The content of the box, where text and images appear Padding - Clears an area around the content. The padding is transparent Border - A border that goes around the padding and content Margin - Clears an area outside the border. The margin is transparent Every element on a page is a rectangular box. Types of box modelThere are actually two types of box model, one is W3C standard, the other is IE model. Basically they all calculate the element width and height based on the content width, content height, padding and border, but their formula are different: W3C standard 12345678outer box (element space size)Element space width = content width + padding + border + marginElement space height = content height + padding + border + margininner box (element size)Element width = content width + padding + borderElement height = content height + padding + border IE box model 1234outer box (element space size)Element space width = content width + margin Element space height = content height + margin(content width including padding and border) In order to make sure we apply the same box model to all browsers, CSS3 provides us with the new box-sizing property: box-sizing: content-box || border-box || inherit Margin Collapsing Layout Definition: the “display” property Block A block-level element starts on a new line and stretches out to the left and right as far as it can. Inline An inline element can wrap some text inside a paragraph without disrupting the flow of that paragraph. center element margin: 0 auto; Centers the block elements to the center of the container. text-align: center; Centers the text content. display:flex; justify-content: center; Centers the items in a flex box horizontally. display:flex; align-items: center; Centers the items in a flex box vertically. FloatingDefinition The float CSS property specifies that an element should be placed along the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the web page, though still remaining a part of the flow. How floated elements are positioned: when an element is floated, it is taken out of the normal flow of the document (though still remaining part of it). It is shifted to the left, or right, until it touches the edge of its containing box, or another floated element. Syntax float: none|left|right|initial|inherit; The float property can have one of the following values: left - The element floats to the left of its container right- The element floats to the right of its container none - The element does not float (will be displayed just where it occurs in the text). This is default inherit - The element inherits the float value of its parent Important Facts float first When a container has multiple elements, some of them are floating, some of them are not, remember to put all the floating elements in front of the non-floating ones! Browsers try to figure out the spacing for those floating ones first. clear The clear property specifies on which sides of an element the floating elements are not allowed to float. .clear { clear: both; /* it can be left|right|both */ } inline-block Floating works great, but as you see we need to apply the .clear to clear out the floating even for a block element. There is another way to achieve the floating effect, that is to use inline-block display. similar to inline, inline-block allows multiple elements to layout on the same line, the beauty of it is that elements can automatically wrap around if the wrapper container is too small, and if you add a block element right after an inline-block element, we don’t need to use the ugly .clear fix. 可实现左右排版 Positionstatic (default) Default value, means the element is not positioned! A static element is said to be not positioned and an element with its position set to anything else is said to be positioned. relative The top, right, bottom and left properties of a relatively-positioned element will cause it to be adjusted away from its original position. Other content will not be adjusted to fit into any gap left by the element. absolute The top, right, bottom and left properties of an absolute-positioned element will cause it to be positioned relatively to the nearest positioned ancestor. fixed A fixed element is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. Examples Trick: 子容器绝对定位（相对于父容器）， 父容器相对定位。 Z-indexDefinition The z-index property specifies the stack order of an element. An element with greater stack order is always in front of an element with a lower stack order. Note: z-index only works on positioned elements (position:absolute, position:relative, or position:fixed). Code http://jsbin.com/rafomem/20/edit?html,css,output]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API 2]]></title>
    <url>%2F2019%2F04%2F12%2F%5BNotes%5D%20TicketMaster%20API%202%2F</url>
    <content type="text"><![CDATA[TicketMaster API 2Benifits of builder class Easier to use because you don’t need to call a constructor with long parameter list Easier to implement because you don’t need to provide constructors with different combinations of private fields. TicketMasterAPI.java Add getAddress 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/*** get the Address from the JSONObject* @param event* @return A String of address* @throws JSONException*/private String getAddress(JSONObject event) throws JSONException &#123; if (!event.isNull("_embedded")) &#123; JSONObject embedded = event.getJSONObject("_embedded"); if (!embedded.isNull("venues")) &#123; JSONArray venues = embedded.getJSONArray("venues"); for (int i = 0; i &lt; venues.length(); ++i) &#123; JSONObject venue = venues.getJSONObject(i); StringBuilder sb = new StringBuilder(); if (!venue.isNull("address")) &#123; JSONObject address = venue.getJSONObject("address"); if (!address.isNull("line1")) &#123; sb.append(address.getString("line1")); &#125; if (!address.isNull("line2")) &#123; sb.append(" "); sb.append(address.getString("line2")); &#125; if (!address.isNull("line3")) &#123; sb.append(" "); sb.append(address.getString("line3")); &#125; &#125; if (!venue.isNull("city")) &#123; JSONObject city = venue.getJSONObject("city"); if (!city.isNull("name")) &#123; sb.append(" "); sb.append(city.getString("name")); &#125; &#125; if (!sb.toString().equals("")) &#123; return sb.toString(); &#125; &#125; &#125; &#125; return "";&#125; Add getImageURL 12345678910111213141516171819202122// &#123;"images": [&#123;"url": "www.example.com/my_image.jpg"&#125;, ...]&#125;/*** Get the image URL from a JSONOBject* @param event* @return A String of image URL* @throws JSONException*/private String getImageUrl(JSONObject event) throws JSONException &#123; if (!event.isNull("images")) &#123; JSONArray images = event.getJSONArray("images"); for (int i = 0; i &lt; images.length(); ++i) &#123; JSONObject image = images.getJSONObject(i); if (!image.isNull("url")) &#123; return image.getString("url"); &#125; &#125; &#125; return "";&#125; Add getCategories 12345678910111213141516171819202122232425// &#123;"classifications" : [&#123;"segment": &#123;"name": "music"&#125;&#125;, ...]&#125;/** * Get a set of categories from a JSONObject * @param event * @return A set of string * @throws JSONException */private Set&lt;String&gt; getCategories(JSONObject event) throws JSONException &#123; Set&lt;String&gt; categories = new HashSet&lt;&gt;(); if (!event.isNull("classifications")) &#123; JSONArray classifications = event.getJSONArray("classifications"); for (int i = 0; i &lt; classifications.length(); i++) &#123; JSONObject classification = classifications.getJSONObject(i); if (!classification.isNull("segment")) &#123; JSONObject segment = classification.getJSONObject("segment"); if (!segment.isNull("name")) &#123; String name = segment.getString("name"); categories.add(name); &#125; &#125; &#125; &#125; return categories;&#125; Add getItemList 1234567891011121314151617181920212223242526272829303132333435363738394041424344// Convert JSONArray to a list of item objects./** * Convert JSONArray to a list of item objects * @param events * @return A list of Item objects * @throws JSONException */private List&lt;Item&gt; getItemList(JSONArray events) throws JSONException &#123; List&lt;Item&gt; itemList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; events.length(); ++i) &#123; JSONObject event = events.getJSONObject(i); ItemBuilder builder = new ItemBuilder(); if (!event.isNull("name")) &#123; builder.setName(event.getString("name")); &#125; if (!event.isNull("id")) &#123; builder.setItemId(event.getString("id")); &#125; if (!event.isNull("url")) &#123; builder.setUrl(event.getString("url")); &#125; if (!event.isNull("rating")) &#123; builder.setRating(event.getDouble("rating")); &#125; if (!event.isNull("distance")) &#123; builder.setDistance(event.getDouble("distance")); &#125; builder.setCategories(getCategories(event)); builder.setAddress(getAddress(event)); builder.setImageUrl(getImageUrl(event)); itemList.add(builder.build()); &#125; return itemList;&#125; Modify Search() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * Search the JSONArray results through TM API * @param lat latitude * @param lon longitude * @param keyword keyword is optional * @return JSONArray */public List&lt;Item&gt; search(double lat, double lon, String keyword) &#123; List&lt;Item&gt; ret = new ArrayList&lt;Item&gt;(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = getItemList(events); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Modify doGet() in searchItem Servlet /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); TicketMasterAPI tmAPI = new TicketMasterAPI(); List&lt;Item&gt; items = tmAPI.search(lat, lon, keyword); JSONArray array = new JSONArray(); try { for (Item item : items) { JSONObject obj = item.toJSONObject(); array.put(obj); } } catch (Exception e) { e.printStackTrace(); } RpcHelper.writeJSONArray(response, array); } Test result test on http://localhost:8080/Jupiter/search?lat=37.38&amp;lon=-122.08]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] CSS Basic]]></title>
    <url>%2F2019%2F04%2F11%2F%5BNotes%5D%20CSS%20Basic%2F</url>
    <content type="text"><![CDATA[CSS BasicCSS introduction CSS stands for Cascading Style Sheets describes how HTML elements (titles, images, paragraph…) are to be displayed on screen, paper, or in other media CSS version 2.1/3.0 IE9 and above browsers support CSS 3.0 CSS in HTML Usage of CSS in HTMl Inline Style 内联样式 (highest priority) &lt;h1 style=&quot;color:blue;&quot;&gt;This is a heading&lt;/h1&gt; (Not recommended) Internal Style 嵌入样式 (second priority) 1234567&lt;head&gt;&lt;style&gt;h1 &#123; color: maroon; &#125; &lt;/style&gt;&lt;/head&gt; External Style 外部样式 (lowest priority) Each page must include a reference to the external style sheet file inside the &lt;link&gt; element. The &lt;link&gt; element goes inside the &lt;head&gt; section: 123&lt;head&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;&lt;/head&gt; type attribute: specifies the media type of the linked document rel：specifies the relationship between the current document and the linked document href：specifies the location of the linked document Default Style 缺省样式 example 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;!-- external style --&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt; &lt;/head&gt; &lt;!-- internal style --&gt; &lt;style&gt; h1 &#123; color: blue; &#125; &lt;/style&gt; &lt;body&gt; &lt;!-- default style --&gt; &lt;h2&gt;test0&lt;/h2&gt; &lt;h1&gt;test1&lt;/h1&gt; &lt;!-- Inline style --&gt; &lt;p style="color:brown"&gt;test2&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Syntax Selector {Property: value; Property: value;} example h1 {color:blue;font-size:12px;} The selector points to the HTML element you want to style. The declaration block contains one or more declarations separated by semicolons. each declaration includes a CSS property name and a value, separated by a colon. always ends with a semicolon declaration blocks are surrounded by curly braces. Comment /* */ Basic properties width - 宽度， 单位px（像素） height - 高度 color - 前景色， 也就是文字的颜色 background-color - 背景色 font-size - 字体的大小 CSS Selectors * All Elements * {color:blue} /*all items set to blue*/ Element name. p {color:blue} /* all p tag turn to blue */ #id The id selector uses the id attribute of an HTML element to select a specific element. The id of an element should be unique within a page, so the id selector is used to select one unique element! To select an element with a specific id, write a hash (#) character, followed by the id of the element.12345&lt;li id=”li-ca”&gt;CA&lt;/li&gt; #li-ca &#123; color: blue;&#125; class The class selector selects elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the name of the class.12345.nice &#123; color: purple;&#125; &lt;p class="nice"&gt;lalala&lt;/p&gt;&lt;p class="nice"&gt;hohoho&lt;/p&gt; Combinator Combinator is a selector combined by multiple selectors. 后代选择器 div p : selects all &lt;p&gt; elements inside &lt;div&gt; elements` 1.class h3 &#123;color:red; font-size:25px;&#125; 并集选择器 div, p : selects all &lt;div&gt; elements and all &lt;p&gt; elements 1.class, h3 &#123;color:red; font-size:25px;&#125; 子元素选择器 div &gt; p : selects all &lt;p&gt; elements where the parent is a &lt;div&gt; element 1.class, h3 &#123;color:red; font-size:25px;&#125; Difference of div p and div &gt; p: div p includes all sons and grandsons, while div &gt; p has only direct sons. 12345678910111213141516171819&lt;style&gt; &lt;!-- All strong whose parent is p --&gt; p &gt; strong &#123; color: red; &#125; p &gt; span &gt; strong &#123; color: green; &#125; &lt;!-- All strong below div --&gt; div strong &#123; font-size: 50px; &#125; &lt;/style&gt; &lt;!-- ... --&gt;&lt;div&gt; &lt;p id="aa"&gt;this is &lt;span&gt;&lt;strong&gt;strong under span&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;this is paragraph 3&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I am strong under p&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt; Attribute selector: Use a [] to select attributes 1234567891011121314151617181920&lt;style&gt; &lt;!-- all p with class attribute --&gt; p[class] &#123; color:red; &#125; &lt;!-- the class of p is "right --&gt; p[class="right"] &#123; color:blue; &#125; &lt;!-- class~="demo means class contains "demo"--&gt; p[class~="demo"] &#123; font-size: 60px; &#125; &lt;/style&gt; &lt;body&gt; &lt;p class="right"&gt; i am div1&lt;/p&gt; &lt;p&gt; i am div2&lt;/p&gt; &lt;p class="left demo"&gt; i am div3&lt;/p&gt; &lt;p id="side"&gt; i am div4&lt;/p&gt; &lt;/body&gt; Pseudo Classes 伪类 :link - (a:link) selects all unvisited links :hover - (a:hover) selects links on mouse over :active - (a:active) selects the active link :visited - (a:visited) selects all visited links\ :first-child - (p:first-child) selects every &lt;p&gt; element that is the first child of its parent 123456789101112131415161718&lt;style&gt; a:link &#123; color: red; &#125; a:visited &#123; color: yellow; &#125; a:hover &#123; font-size: 50px; color: blue; &#125; a:active &#123; color: green; &#125; p:first-child &#123; background-color: brown; &#125; &lt;/style&gt; Pesudo Elements ::first-element (does not work on inline elements, such as span)123456&lt;style&gt; p::first-letter &#123; font-size: 100px; color: pink; &#125; &lt;/style&gt; CSS Cascade and Inheritance CSS Cascade the cascade is a set of rules for determining which style properties get applied to an element. It specifies how a web browser should handle multiple styles that apply to the same tag and what to do when CSS properties conflict. bottom &gt; top Inheritance some property values applied to an element will be inherited by that element’s children, and some won’t. font-family and color to be inherited, as that makes it easy for you to set a site-wide base font by applying a font-family to the &lt;html&gt; element; margin, padding, border, and background-image to NOT be inherited &lt;a&gt; does not support any kind of inheritance unless: a {color: inherit;} eg. &lt;span&gt; inside a &lt;p&gt; will be overrided. Specificity First Principle Inline style &gt; Internal &gt; external &gt; inheritance &gt; default Second Principle id &gt; class/pseudo class &gt; tag &gt; inheritance &gt; default Specificity Collision CSS provides a formula for determining a style’s specificity that’s based on a value assigned to the style’s selector - a tag selector, class selector, ID selector, and so on. Here’s how the system works: A tag selector is worth 1 point. A class selector is worth 10 points. An ID selector is worth 100 points. An inline style is worth 1,000 points. The bigger the number, the greater the specificity. Example A tag style for the tag (specificity = 1) A class style named .highlight (specificity = 10) An ID style named #logo (specificity = 100) Then say your web page has this HTML: &lt;img id=”logo” class=”highlight” src=”logo.gif”/&gt;. If you define the same property - such as the border property - in all three styles, then the value from the ID style (#logo) always wins out. A pseudo-element (like ::before) is treated like a tag selector and is worth 1 point. A pseudo-class (:link) is treated like a class and is worth 10 points. Since descendant selectors are composed of several selectors - #content p, or h2 strong, for example, the math gets a bit more complicated. The specificity of a descendant selector is the total value of all of the selectors listed. A descendant selector = 1 tag + 1 tag/class If there’s still collision, last style wins !important; This is an overruling specificity, it means ‘this is important, ignore subsequent rules, and any usual specificity issues, apply this rule!’ For example:1234&lt;style&gt;.nav a &#123; color: red; &#125;a &#123; color: blue !important; &#125;&lt;/style&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20TicketMaster%20API%2F</url>
    <content type="text"><![CDATA[TicketMaster APIHTML request message Request structure GET /doc/test.html HTTP 1.1First part indicates the type of the request, second part indicates the resource it asks for, third part is the version of protocal Request Header Request Body bookId=12345&amp;author=Tan+Ah+Teck Some browser will process the data here. Response structure Status line HTTP/1.1 200 OK200 indicates that the response status number, and the “OK” is the explanation of the status. Response Header Response Body &lt;h1&gt;Home page&lt;/h1&gt; RESTful API CRUD Create/Read/Update/Delete matches HTTP POST/GET/PUT/DELETE server is stateless No need to involve other requests when handling the request. TicketMaster API Request URL of discover API protocol://hostname:port/endpoint?query : protocol: https hostname: app.ticketmaster.com endpoint: /discovery/v2/events.json query: APIkey: it’s required by TicketMaster API for authn/authz GeoPoint: lat/long since our search is based on client location Radius: radius of search area Keyword: search a specific kind of events example https://app.ticketmaster.com/discovery/v2/events.json?apikey=12345&amp;geoPoint=abcd&amp;keyword=music&amp;radius=50 Headers and Body: nothing to set since it’s not required for this API. Response data we need is located in _embedded(JSON Object) -&gt; events(JSON Array) -&gt; item object(JSON Object) Implementation Create a new Package external in src Create a new class TicketMasterAPI Add some constants 123​private static final String URL = "https://app.ticketmaster.com/discovery/v2/events.json";​private static final String DEFAULT_KEYWORD = ""; // no restriction​private static final String API_KEY = "USE_YOUR_OWN_KEY"; Add a search function 123456789/*** Search the keyword through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional*/public JSONArray search(double lat, double lon, String keyword) &#123; return null;&#125; Add queryAPI helper 12345678910111213141516/*** print the results of search(lat, lon)* @param lat latitude* @param lon longitude*/private void queryAPI(double lat, double lon) &#123; JSONArray events = search(lat, lon, null); try &#123; for (int i = 0; i &lt; events.length(); i++) &#123; JSONObject event = events.getJSONObject(i); System.out.println(event); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; Add GeoHash helper to convert lat, lon to geoPoint. Copy the code from http://developer-should-know.com/post/87283491372/geohash-encoding-and-decoding-algorithm Implement search(lat,lon,keyword) function 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*** Search the JSONArray results through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional* @return JSONArray*/public JSONArray search(double lat, double lon, String keyword) &#123; JSONArray ret = new JSONArray(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = events; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Create a new package entity and a new class Item(entity表示servelet储存数据的类) 123456789101112131415161718192021222324252627/*** Item of event* @author andaluo**/public class Item &#123; private String itemId; private String name; private double rating; private String address; private Set&lt;String&gt; categories; private String imageURL; private String url; private double distance; public JSONObject toJSONObject() &#123; JSONObject obj = new JSONObject(); try &#123; obj.put("item_id", itemId); obj.put("name", name); obj.put("rating", rating); // ... &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return obj; &#125; Use builder pattern to create Item class 12345678910111213141516171819202122232425262728293031323334353637383940414243 /** * A helper class to build the Item class * @author andaluo * */ public static class ItemBuilder&#123; private String itemId; private String name; // ... /** * Construct the Item using builder * @return */ public Item build() &#123; return new Item(this); &#125; /** * return the builder itself to support continuous operation. * @param itemId * @return */ public ItemBuilder setItemId(String itemId) &#123; this.itemId = itemId; return this; &#125; //... &#125; /** * Builder pattern to create a class * @param builder */ public Item(ItemBuilder builder) &#123; this.itemId = builder.itemId; this.name = builder.name; // ... // when build the item we get public static void main(String[] args) &#123;Item item = new Item.ItemBuilder().setAddress("abc").setDistance(19).build(); &#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Reverse A Linked List]]></title>
    <url>%2F2019%2F04%2F09%2FHow%20to%20Reverse%20A%20Linked%20List%2F</url>
    <content type="text"><![CDATA[Reverse linked list corner case 12dummy-&gt;1-&gt;nulldummy-&gt;null general case 1234567891011dummy-&gt; 1 -&gt; 2 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre nextNode cur dummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 3 -&gt; 2 -&gt; 1 -&gt; nullpre cur nextNode link cur to the next node cur.next = nextNode.next link nextNode to the head of the reversed part nextNode.next = pre.next link pre to the nextNode pre.next = nextNode update nextNode to next nextNode = cur.next when nextNode gets to the end, exit cur represents the tail, and pre represents the the dummy, nextNode represents the node waiting to be added to the head of the list.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] HTML Basic]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20HTML%20Basic%2F</url>
    <content type="text"><![CDATA[HTML BasicHow Internet works(High Level) ​find the right address www.google.com -&gt; 172.217.8.132 Your query is submitted to your ISP( Internet service provider) DNS(Domain Name System) takes the domain name and turns it into URI a request is sent to the server and then the server response whatever requested, in this case, it is the combination of html, css and JavaScript the browser display the website. Basic Web Technologies HTML: Structure CSS: Style JavaScript: Interaction Tags Hypertext Markup Language Tags 123456789101112131. &lt;!DOCTYPE&gt; (声明)2. &lt;html&gt;3. &lt;body&gt;4. &lt;ul&gt;5. &lt;div&gt;6. &lt;span&gt;7. &lt;a&gt;8. &lt;img&gt;9. &lt;header&gt;10. &lt;nav&gt;11. &lt;section&gt;12. &lt;aside&gt;13. &lt;footer&gt; &lt;!DOCTYPE&gt; &lt;!DOCTYPE&gt; declaration is not an HTML tag it is an instruction to the web browser about what version of HTML the page is written in and how to render the content always add the &lt;!DOCTYPE&gt; declaration to your HTML documents. html5的声明是&lt;!DOCTYPE html&gt; &lt;head&gt; provides general information (metadata) about the document,including its title and links to its scripts and style sheets. after &lt;html&gt; tag only 1 pair of &lt;head&gt; tag in a html document &lt;title&gt; can only be placed here. &lt;meta charset=&quot;UTF-8&quot;&gt; set the charSet of this page &lt;body&gt;​- represents the content of an HTML document.​- after &lt;head&gt; tag but on the same level only 1 pair of &lt;body&gt; element in a document contains: 标题标签 &lt;h1&gt; - &lt;h6&gt; 段落标签 &lt;p&gt; 注释标签 &lt;!-- comment -- &gt; 水平线标签 &lt;hr&gt;(单标签) 换行标签 &lt;br&gt;（单标签） 文本节标签 &lt;span&gt; &lt;ul&gt; Unordered list represents an unordered list of items typically rendered as a bulleted list uses with &lt;li&gt; &lt;ol&gt; ordered list &lt;li&gt; represent an item in a list. must be contained in a parent element: an ordered list &lt;ol&gt;, an unordered list &lt;ul&gt;, or a menu &lt;menu&gt;. &lt;a&gt; 超级链接 creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL. &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; href attribute: contains a URL or a URL fragment that the hyperlink points to. #: link to an element with a specified id within the page (like href=”#top”) target attribute: _blank vs. _self example12&lt;a href="http://www.google.com" target="_blank"&gt;&lt;/a&gt;&lt;!-- _blank means open in new tag, _self means open in this tag---&gt; &lt;img&gt;图片标签（单标签） defines an image in an HTML page. has two required attributes: src and alt: &lt;img src=”” alt=”” &gt; has no end tag(self-closing tag). if the image is broken, then the alternative name shows up. Blocks &lt;div&gt; the generic container for flow content and does not inherently represent anything. use it to group elements for purposes. recall&lt;span&gt; a generic inline container for phrasing content. does not inherently represent anything. use it to group elements for purposes. &lt;div&gt; vs. &lt;span&gt; find all block elements and inline elements after the class &lt;p&gt; 另起一行，因此也属于块状标签 Semantic Tags A semantic element clearly describes its meaning to both the browser and the developer. 语义标签 examples of non-semantic elements: &lt;div&gt; and &lt;span&gt; - tells nothing about its content. examples of semantic elements: &lt;form&gt;, &lt;table&gt;, and &lt;article&gt; - clearly defines its content. Semantic elements &lt;header&gt; 页眉:represents a container for introductory content or a set of navigational links. &lt;section&gt; 区块:represents a standalone section of functionality contained within an HTML document, typically with a heading, which doesn’t have a more specific semantic element to represent it. &lt;aside&gt; 侧边栏:represents a section of a document with content connected tangentially to the main content of the document (often presented as a sidebar). &lt;nav&gt; 导航:represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. &lt;footer&gt; 页脚:defines a footer for a document or section which contain information about its containing element. Project Structure structure 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="description" content="Item Recommendation"&gt; &lt;meta name="author" content="Your Name"&gt; &lt;title&gt;Item Recommendation Final&lt;/title&gt;&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;nav&gt; &lt;a href=""&gt;Home&lt;/a&gt; &lt;a href="#name"&gt;Contact&lt;/a&gt; &lt;a href=""&gt;About&lt;/a&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div&gt; &lt;header&gt; &lt;p&gt; &lt;span&gt;Item&lt;/span&gt; &lt;i id="avatar" class="avatar fa fa-user fa-2x"&gt;Icon&lt;/i&gt; &lt;br&gt; Recommendation &lt;/p&gt; &lt;/header&gt; &lt;section&gt; &lt;aside&gt; &lt;nav&gt; &lt;a href="#"&gt;Nearby&lt;/a&gt; &lt;a href="#"&gt;My Favorites&lt;/a&gt; &lt;a href="#"&gt;Recommendation&lt;/a&gt; &lt;/nav&gt; &lt;/aside&gt; &lt;ul&gt; &lt;li&gt; &lt;img src="https://s1.ticketm.net/dam/c/48b/2352e3b5-8496-496b-97a3-e605177e848b_105851_ARTIST_PAGE_3_2.jpg" /&gt; &lt;div&gt; &lt;a href="#"&gt;Item&lt;/a&gt; &lt;p&gt;Music&lt;/p&gt; &lt;/div&gt; &lt;p&gt;99 Grove Street&lt;br/&gt;San Francisco&lt;br/&gt; CA&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;/div&gt; &lt;footer&gt; &lt;p&gt;What We Do&lt;/p&gt; &lt;p&gt;"Help you find the best place around."&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Example office, CA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;info@example.com&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;+1 800 123 456&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; Use FontAwesome to get icon. Add the css to 123&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot;&gt; &lt;i id=&quot;avatar&quot; class=&quot;avatar fa fa-user fa-2x&quot;&gt;&lt;/i&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Java Servlet]]></title>
    <url>%2F2019%2F04%2F05%2F%5BNotes%5D%20Java%20Servlet%2F</url>
    <content type="text"><![CDATA[ServletREST(Representational State Transfer) REST is web server design pattern Operations are directly based on HTTP methods, so that server don’t need to parse extra thing URL clearly indicates which resource a client want, easy for client side users to understand. Server is running in stateless mode, improve scalability. Create Jupyter Project &amp;&amp; SearchItem Servlet Create Dynamic Project called “Jupiter” Add Tomcat 9.0 to its Java Build Path Add And Remove project Jupyter to existed Tomcat server Create java Servlet in Jupyter project, name it SearchItem and name the package rpc It should contain a doGet() and doPost() change the mapping url 1234// better style to set them all lowercase// 可以直接在创建servlet的页面修改@WebServlet("/SearchItem") // by default@WebServlet("/search") Handle the doGet() method by adding tutorial code 1234567891011// response.getWriter()表示得到response的输出流PrintWriter out = response.getWriter();// request.getParameter表示获取request中的body的参数信息if (request.getParameter("username") != null) &#123; String username = request.getParameter("username"); out.print("Hello " + username);&#125;// 一定要关闭这个输出流out.close(); test the input 1http://localhost:8080/Jupiter/search?username=abcd return a HTML page 123456789// 需要告诉浏览器页面的类型，渲染成所需的格式response.setContentType("text/html");PrintWriter out = response.getWriter();out.println("&lt;html&gt;&lt;body&gt;");out.println("&lt;h1&gt;This is a HTML page&lt;/h1&gt;");out.println("&lt;/body&gt;&lt;/html&gt;");out.close(); add Java-json jar support to the WebContent-WebInf-lib test json support 12345678910111213141516// 把页面设置成json键值对格式response.setContentType("application/json");PrintWriter out = response.getWriter();String username = "";if (request.getParameter("username") != null) &#123; username = request.getParameter("username");&#125;JSONObject obj = new JSONObject();try &#123; obj.put("username", username);&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(obj);out.close(); test jason array 123456789101112response.setContentType("application/json");PrintWriter out = response.getWriter();//json array 存储多个键值对JSONArray array = new JSONArray();try &#123; array.put(new JSONObject().put("username", "abcd")); array.put(new JSONObject().put("username", "1234"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(array);out.close(); Create RecommendItem Servlet Create another Servlet called RecommendItem under prc package, and change the mapping url practice on JSONArray12345678910111213141516// 1. set content typeresponse.setContentType("application/json");// 2. get output stream of responsePrintWriter out = response.getWriter();// 3. create json arrayJSONArray arr = new JSONArray();try &#123; // 4. create JSONObject and put those in the JSONArray arr.put(new JSONObject().put("name", "abcd").put("address", "san francisco").put("time","01/01/2017")); arr.put(new JSONObject().put("name", "1234").put("address", "san jose").put("time","01/02/2017"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;// 5. print the resultout.print(arr);out.close(); Add RpcHelper utility class create regular class RpcHelper under rpc package add writeJSONObject(response, JSONObject) 123456789101112131415public static void writeJSONObject(HttpServletResponse response , JSONObject obj) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter PrintWriter out = response.getWriter(); // 4. 写入 out.print(obj); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; add writeJSONArray(response, JSONArray) 123456789101112131415public static void writeJSONArray(HttpServletResponse response , JSONArray array) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter out = response.getWriter(); // 4. 写入 out.print(array); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; now apply the helper to the SearchItem and RecommendationItem TicketMaster API An web based API provided by TicketMaster so that clients and get real events data from TicketMaster server. You cannot see the source code of it, but you can refer to the documentation to figure out how to use the interface to make connection by sending request to it’s backend. It’s required by TicketMaster API so that it’ll know who is using their API. To get your API key, you need to register on this website: http://developer.ticketmaster.com, and you’ll see your API key when we navigate to API details. The bottle neck of this project is TicketMaster API, since we cannot control its performance. If we have to optimize it, we can create a cache. Or we can make another API. Make a copy each time we query something from TicketMaster. If TicketMaster is down. We can query local copy of nearest geo point.模仿一个曲线拟合的过程，即模糊搜索]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Web Application Basic]]></title>
    <url>%2F2019%2F04%2F04%2F%5BNotes%5D%20Web%20Application%20Basic%2F</url>
    <content type="text"><![CDATA[Web ApplicationDependencies: Java 8 Eclipse EE Postman Tomcat Web Application: Clients -&gt;Internet-&gt; Server Server(Backend) Client(Frontend): User interface Internet TCP/IP区别： IP对应特定机器的地址，TCP对应特定机器特定进程的地址 TCP通过端口来监听请求，请求包括IP和端口号 在浏览器输入www.example.com会发生什么？ (client) client opens browser and goes to an Internet address (IP address/URL/hostname) and asks for page for (http://www.example.com), which means “I want to see ‘http://www.example.com/index.html’” (network) Internet redirects your request “I want to see ‘http://www.example.com’” to example’s server (a set of web servers) (server) One of example’s server sends a response to your Internet address (ip address). The response contains a HTML page. We will talk about HTML later. (network) The response goes through the Internet and received by your browser. (client) Your browser receives the response from example’s server and the HTML page contained in it. Render the page view and present to you. How to view the HTML page source? (Right click, and view page source) 如何设计web app? 三层结构 presentation tier 直接与用户交互 logic tier 应用具体的逻辑 data tier 数据库 Tomcat 提供web server RPC(remote procedure call) 调用一个远端机器上的API Java Servlet 服务器端负责处理RPC的java class Tomcat 存放servlet的环境，负责接受请求并分配到对应的servlet处理,把处理的结果传给正确的客户 Tomcat配置 在properties里面点一下switch location找配置文件 server location改成 use tomcat installation 地址localhost:8080 Http request methods GET(read in general) POST(write in general) PUT(write) DELETE(write) URL(Unique Resource Locator) format: 123456+ protocal(http/https)+ hostname(www.youtube.com)+ port(8080): which process+ endpoint: The name and location of the requested resource, under the server base directory. 相当于要触发的服务或功能+ query: separated from the preceding part by a question mark (?), containing a query string of attribute–value pairs separated by a delimiter. 相当于参数+ example: ```https://www.youtube.com/results?search_query=example example: 12. url会自动将空格转码成```&quot;20%&quot; 如果要inplace操作的话，先扫一遍找出空格数，然后再扩容字符串，然后冲后往前填。 http request body: 包含http request的数据 POST的body信息通常是隐藏的,GET通常没有必要隐藏 request例子 1234567891011121314151617181920212223242526JSON(JavaScript Object Notation)&#123;“instructor”: &#123; &quot;company&quot;: &quot;Laioffer&quot;, &quot;course&quot;: “Project” , &quot;name&quot;: “Vincent”&#125; &#125;// Alternative formatsXML: eXtensible Markup Language&lt;instructor&gt;&lt;company&gt;Laioffer&lt;/company&gt;&lt;course&gt;Project&lt;/course&gt;&lt;name&gt;Vincent&lt;/name&gt;&lt;/instructor&gt;ProtocolBufferInstructor &#123;company = “Laioffer”,course= “Project”name= “Vincent”&#125; JSON简洁一些，xml长一些，ProtocalBuffer更新效率更高。前两种都是字符串，后一种是java class，相当于二进制文件，需要额外支持。]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bitwise operation位运算相关]]></title>
    <url>%2F2019%2F03%2F29%2Fbitwise%20operation%2F</url>
    <content type="text"><![CDATA[1. How to check odd numbern &amp; 1 means comparing last digit of binary number to 1 12def is_odd(n): return n &amp; 1 == 1 2. Float divisionn &gt;&gt; 1 means n floor divides 2 12&gt;&gt;&gt; 5 &gt;&gt; 12]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld]]></title>
    <url>%2F2019%2F03%2F28%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[长风破浪会有时，直挂云帆济沧海！]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Leetcode] 3. Longest Substring Without Repeating Characters]]></title>
    <url>%2F2019%2F03%2F28%2F3.%20Longest%20Substring%20Without%20Repeating%20Characters%2F</url>
    <content type="text"><![CDATA[meidumGiven a string, find the length of the longest substring without repeating characters. Example 1: 123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: 123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: 1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution1: def lengthOfLongestSubstring(self, s): """ :type s: str :rtype: int """ # DFS solution O(n2) if not s: return 0 memo = set() self.max_length = float('-inf') for i in range(len(s)): if self.max_length &gt;= len(s) - i: break self.helper("", i, s, memo) return self.max_length def helper(self, path, ind, string, memo): self.max_length = max(self.max_length, len(path)) if ind &gt;= len(string): return if string[ind] not in path: path+=string[ind] # print(path) self.helper(path, ind+1, string, memo) return class Solution2: # sliding window # O(2n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 i = j = 0 res = 0 memo = set() while i &lt; len(s) and j &lt; len(s): if s[j] not in memo: memo.add(s[j]) res = max(res, j - i + 1) j+=1 else: memo.remove(s[i]) i += 1 return res class Solution: # sliding window optimized using map # O(n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 res = 0 i = j = 0 dic = &#123;&#125; while j &lt; len(s): if s[j] in dic: i = max(dic[s[j]], i) res = max(res, j - i + 1) dic[s[j]] = j + 1 j+=1 return res]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
